#+title: Day12
#+PROPERTY: header-args :session Day12 :exports both

* Part 1
Can we do this without recursion?
A list of things we need (without parsing, that I will worry about later):

- keep track of current path
- check if goal is reached and save path or at least the length
- check if deadend is reached
- check where you can go from current position (excluding tiles already visited)
- go back one square after deadend or goal and take the next path
  This needs to make sure I dont go the same way again



#+begin_src elisp :exports both
(defun read-input (filename)
  (with-temp-buffer
    (insert-file-contents filename)
    (let ((line "")(start nil)(end nil)(result '())(linecount 0))
      (while (not (eobp))
        (let ((beg (point)))
          (move-end-of-line nil)
          (setq line (buffer-substring beg (point)))
          (let ((heights '()))
          (dolist (i (number-sequence 0 (- (length line) 1)))
            (let ((element (elt line i)))
              (cond
               ((equal element ?S)(push 0 heights)(setq start (cons linecount i)))
               ((equal element ?E)(push (- ?z ?a) heights)(setq end (cons linecount i)))
               (t (push (- element ?a) heights)))))
          (push (reverse heights) result)))
          (forward-char)
          (incf linecount))
      (setq result (reverse result))
      (list result start end))))

(setq dummy-input (read-input "../data/day12/dummy-input"))
(pp dummy-input)
#+end_src

#+RESULTS:
: (((0 0 1 16 15 14 13 12)
:   (0 1 2 17 24 23 23 11)
:   (0 2 2 18 25 25 23 10)
:   (0 2 2 19 20 21 22 9)
:   (0 1 3 4 5 6 7 8))
:  (0 . 0)
:  (2 . 5))



#+begin_src elisp :exports both
(defun valid-next-steps (data position)
  (let ((n (- (length data) 1))(m (- (length (elt data 0)) 1))(next-steps '())(x (car position))(y (cdr position)))
    (if (and (<= x n)(>= x 0)(<= y m)(>= y 0))
        (progn
    (if (not (<= x 0)) ; check left
        (if (>= 1 (- (elt (elt data (- x 1)) y) (elt (elt data x) y)))
            (push (cons (- x 1) y) next-steps)))
    (if (not (>= x n)) ; check right
        (if (>= 1 (- (elt (elt data (+ x 1)) y) (elt (elt data x) y)))
            (push (cons (+ x 1) y) next-steps)))
    (if (not (<= y 0)) ; check above
        (if (>= 1 (- (elt (elt data x) (- y 1)) (elt (elt data x) y)))
            (push (cons x (- y 1)) next-steps)))
    (if (not (>= y m)) ; check below
        (if (>= 1 (- (elt (elt data x) (+ y 1)) (elt (elt data x) y)))
            (push (cons x (+  y 1)) next-steps)))))
    next-steps
    ))

(valid-next-steps (elt dummy-input 0) (cons 0 2))
#+end_src

#+RESULTS:
: ((0 . 1) (1 . 2))

#+begin_src elisp
(defun create-empty-grid (n m)
(setq m-array (make-vector n nil))
(dotimes (i n) (setf (aref m-array i) (make-vector m nil)))
m-array)
#+end_src

#+RESULTS:
: create-empty-grid

#+begin_src elisp :exports both
(defun find-next-node (visited distances)
  (let ((result nil)(current-min nil))
  (seq-doseq (i (number-sequence 0 (- (length visited) 1 )))
    (seq-doseq (j (number-sequence 0 (- (length (elt visited 0)) 1 )))
      (let ((value (elt (elt distances i) j)))
        (if (and (equal value nil)(not (equal current-min nil)))(setq value (+ current-min 1)))
        (if (equal (elt (elt visited i) j) nil) ; not visited
            (if (or (equal current-min nil)(< value current-min))
                (progn (setq current-min value)(setq result (cons i j))))))))
  result))

(find-next-node '((nil nil t)(nil t nil)) '((nil nil nil)(nil nil nil)))
#+end_src

#+RESULTS:
: (1 . 2)

#+begin_src elisp :exports both
(defun* dijkstra (data goal)
  (let* ((n (length data))(m (length (elt data 0)))(visited (create-empty-grid n m))(distances (create-empty-grid n m))(current-node goal)(neighbors nil)(count (count-nils visited)))

    ;; only once for start node
    (setf (elt (elt distances (car current-node)) (cdr current-node)) 0)

    ;; loop until all nodes visited here
    ;(while (> (count-nils visited) 0)
    (while (> count 0)
      (message "%d" count)
    ;;check neighbors and set their new distances
    (setq neighbors (valid-next-steps data current-node))

    (when (equal (elt (elt distances (car current-node)) (cdr current-node)) nil)
      (cl-return-from dijkstra distances))

    (dolist (neighbor neighbors)
      (let* ((x (car neighbor))(y (cdr neighbor))(neighbor-dist (elt (elt distances x) y))(current-dist (elt (elt distances (car current-node)) (cdr current-node))))
        (cond
         ((equal neighbor-dist nil)(setf (elt (elt distances x) y) (+ current-dist 1)))
         ((< (+ current-dist 1) neighbor-dist)(setf (elt (elt distances x) y) (+ current-dist 1)))
         )))
    ;; mark visited
    (setf (elt (elt visited (car current-node))(cdr current-node)) t)
    ;; go to next node
    (setq current-node (find-next-node visited distances))
    (decf count)
    )
    distances))

(setq dummy-input (read-input "../data/day12/dummy-input"))
(setq distances (dijkstra (elt dummy-input 0) (elt dummy-input 1)))
(pp distances)
#+end_src

#+RESULTS:
: [[0 1 2 19 18 17 16 15]
:  [1 2 3 20 29 28 27 14]
:  [2 3 4 21 30 31 26 13]
:  [3 4 5 22 23 24 25 12]
:  [4 5 6 7 8 9 10 11]]

#+begin_src elisp
(defun solution-12-1 (filepath)
  (let ((data (read-input filepath))(result nil)(distances nil))
    (setq distances (dijkstra (elt data 0)(elt data 1)))
    (message "%s" distances)
    (let ((x (car (elt data 2)))(y (cdr (elt data 2))))
    (setq result (elt (elt distances x) y)))
    result
    )
  )
(solution-12-1 "../data/day12/dummy-input")
#+end_src

#+RESULTS:
: 31

#+begin_src elisp :exports both
(solution-12-1 "../data/day12/input")
#+end_src

#+RESULTS:
: 437

* Part 2
Stefan told me he brute-forced it, but actually you should be able to invert it, no?
So starting from the top and calculate the distance to all nodes.
Then find all "a" and take the minimum
For that, you need to change the condition for valid next steps:
- Go at most one "DOWN"
- Go up as many as you want

#+begin_src elisp :exports both
(defun valid-next-steps-2 (data position)
  (let ((n (- (length data) 1))(m (- (length (elt data 0)) 1))(next-steps '())(x (car position))(y (cdr position)))
    (if (and (<= x n)(>= x 0)(<= y m)(>= y 0))
        (progn
    (if (not (<= x 0)) ; check left
        (if (>= 1 (- (elt (elt data x) y) (elt (elt data (- x 1)) y)))
            (push (cons (- x 1) y) next-steps)))
    (if (not (>= x n)) ; check right
        (if (>= 1 (- (elt (elt data x) y) (elt (elt data (+ x 1)) y)))
            (push (cons (+ x 1) y) next-steps)))
    (if (not (<= y 0)) ; check above
        (if (>= 1 (- (elt (elt data x) y) (elt (elt data x) (- y 1))))
            (push (cons x (- y 1)) next-steps)))
    (if (not (>= y m)) ; check below
        (if (>= 1 (- (elt (elt data x) y) (elt (elt data x) (+ y 1))))
            (push (cons x (+  y 1)) next-steps)))))
    next-steps
    ))

(valid-next-steps-2 (elt dummy-input 0) (cons 0 2))
#+end_src

#+RESULTS:
: ((0 . 3) (0 . 1) (1 . 2))

#+begin_src elisp :exports both
(defun* dijkstra-2 (data goal)
  (let* ((n (length data))(m (length (elt data 0)))(visited (create-empty-grid n m))(distances (create-empty-grid n m))(current-node goal)(neighbors nil)(count (count-nils visited)))

    ;; only once for start node
    (setf (elt (elt distances (car current-node)) (cdr current-node)) 0)

    ;; loop until all nodes visited here
    ;(while (> (count-nils visited) 0)
    (while (> count 0)
      (message "%d" count)
    ;;check neighbors and set their new distances
    (setq neighbors (valid-next-steps-2 data current-node))

    (when (equal (elt (elt distances (car current-node)) (cdr current-node)) nil)
      (cl-return-from dijkstra-2 distances))

    (dolist (neighbor neighbors)
      (let* ((x (car neighbor))(y (cdr neighbor))(neighbor-dist (elt (elt distances x) y))(current-dist (elt (elt distances (car current-node)) (cdr current-node))))
        (cond
         ((equal neighbor-dist nil)(setf (elt (elt distances x) y) (+ current-dist 1)))
         ((< (+ current-dist 1) neighbor-dist)(setf (elt (elt distances x) y) (+ current-dist 1)))
         )))
    ;; mark visited
    (setf (elt (elt visited (car current-node))(cdr current-node)) t)
    ;; go to next node
    (setq current-node (find-next-node visited distances))
    (decf count)
    )
    distances))

(setq dummy-input (read-input "../data/day12/dummy-input"))
(setq distances (dijkstra-2 (elt dummy-input 0) (elt dummy-input 2)))
(pp distances)
#+end_src

#+RESULTS:
: [[31 30 29 12 13 14 15 16]
:  [30 29 28 11 2 3 4 17]
:  [31 28 27 10 1 0 5 18]
:  [30 27 26 9 8 7 6 19]
:  [29 28 25 24 23 22 21 20]]

#+begin_src elisp
(setq input (read-input "../data/day12/input"))
(setq distances-full (dijkstra-2 (elt input 0) (elt input 2)))
(length distances)
#+end_src

#+RESULTS:
: 5

#+begin_src elisp :exports both
(defun find-shortest (data distances)
  (let ((minimum '()))
    (dolist (i (number-sequence 0 (- (length distances) 1)))
      (dolist (j (number-sequence 0 (- (length (elt distances 0)) 1)))
        (let ((height (elt (elt data i) j))(dist (elt (elt distances i) j)))
          (message "%s %s" height dist)
          (if (and (not (equal dist nil))(equal height 0))(push dist minimum)))))
    (-min minimum)))
(find-shortest (elt dummy-input 0) distances)
#+end_src

#+RESULTS:
: 29

#+begin_src elisp :exports both
(find-shortest (elt input 0) distances-full)
#+end_src

#+RESULTS:
: 430

* Post mortem
I did it, but there are some issues. Will not fix them, because this took way too long already, but for completeness:
- My dijkstra is pretty slow. It could be faster if I just had two lists for visited and remaining and push/popped from there instead of this 2d-"array" thing I did.
- There is a bug (I think), that I worked around: If there are no connected valid nodes from the current node, the algorithm stops.
  At least I think that is what happens. So I do not actually check all nodes. Its ~40 nodes missing in A and ~2000 in B.
  I would need to think about if that makes any sense, but I would classify it as a bug. It could just take any remaining node with a valid distance.
  If there are none, maybe these are just separated or one could recalculate their distances if that happens.
- The code for B is n
